Question:

There are N children standing in a line. Each child is assigned a rating value. You are giving candies to these children subjected to the following requirements:

1. Each child must have at least one candy.
2. Children with a higher rating get more candies than their neighbors.

What is the minimum candies you must give?

-----------------------------
My thoughts:
1. Reminds of the peak and valley question.
2. When the ratings start to descend, look for the one that has the lowest value; give one candy to that student, and add one more to each child before that.

Implementation difficulty:
1. Need to keep track of a lot of variables in order to track the num of candies we should give to the children on the descending part;
2. Hard to be accurate.

An easier way to implement:
1. Find ascending order from left to right; add one to each;
2. Find ascending order from right to left; add one to each.

Source：
https://www.programcreek.com/2014/03/leetcode-candy-java/


This problem can be solved in O(n) time.

We can always assign a neighbor with 1 more if the neighbor has higher a rating value. However, to get the minimum total number, we should always start adding 1s in the ascending order. We can solve this problem by scanning the array from both sides. First, scan the array from left to right, and assign values for all the ascending pairs. Then scan from right to left and assign values to descending pairs.

This problem is similar to Trapping Rain Water. （https://www.programcreek.com/2014/06/leetcode-trapping-rain-water-java/）

Java Solution:

public int candy(int[] ratings) {
	if (ratings == null || ratings.length == 0) {
		return 0;
	}
 
	int[] candies = new int[ratings.length];
	candies[0] = 1;
 
	//from let to right
	for (int i = 1; i < ratings.length; i++) {
		if (ratings[i] > ratings[i - 1]) {
			candies[i] = candies[i - 1] + 1;
		} else { 
			// if not ascending, assign 1
			candies[i] = 1;
		}
	}
 
	int result = candies[ratings.length - 1];
 
	//from right to left
	for (int i = ratings.length - 2; i >= 0; i--) {
		int cur = 1;
		if (ratings[i] > ratings[i + 1]) {
			cur = candies[i + 1] + 1;
		}
 
		result += Math.max(cur, candies[i]);
		candies[i] = cur;
	}
 
	return result;
}
